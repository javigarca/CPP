#include <iostream>
#include <string>
#include <limits>
#include <cctype>
#include <cerrno>
#include <cmath>

class ScalarConverter {
public:
    static void convert(const std::string& literal);

private:
    ScalarConverter() {} // Private constructor to prevent instantiation

    static bool isChar(const std::string& literal);
    static bool isInt(const std::string& literal);
    static bool isFloat(const std::string& literal);
    static bool isDouble(const std::string& literal);

    static void printChar(char c);
    static void printInt(int i);
    static void printFloat(float f);
    static void printDouble(double d);
};

void ScalarConverter::convert(const std::string& literal) {
    if (isChar(literal)) {
        char c = literal[1];
        printChar(c);
        printInt(static_cast<int>(c));
        printFloat(static_cast<float>(c));
        printDouble(static_cast<double>(c));
    } else if (isInt(literal)) {
        long l = std::strtol(literal.c_str(), nullptr, 10);
        if (errno == ERANGE || l > std::numeric_limits<int>::max() || l < std::numeric_limits<int>::min()) {
            std::cout << "int: impossible" << std::endl;
        } else {
            int i = static_cast<int>(l);
            printInt(i);
            printChar(static_cast<char>(i));
            printFloat(static_cast<float>(i));
            printDouble(static_cast<double>(i));
        }
    } else if (isFloat(literal)) {
        float f = std::strtof(literal.c_str(), nullptr);
        if (errno == ERANGE) {
            std::cout << "float: impossible" << std::endl;
        } else {
            printFloat(f);
            printChar(static_cast<char>(f));
            printInt(static_cast<int>(f));
            printDouble(static_cast<double>(f));
        }
    } else if (isDouble(literal)) {
        double d = std::strtod(literal.c_str(), nullptr);
        if (errno == ERANGE) {
            std::cout << "double: impossible" << std::endl;
        } else {
            printDouble(d);
            printChar(static_cast<char>(d));
            printInt(static_cast<int>(d));
            printFloat(static_cast<float>(d));
        }
    } else {
        std::cout << "Conversion impossible" << std::endl;
    }
}

bool ScalarConverter::isChar(const std::string& literal) {
    return literal.length() == 3 && literal[0] == '\'' && literal[2] == '\'';
}

bool ScalarConverter::isInt(const std::string& literal) {
    char* end;
    errno = 0;
    std::strtol(literal.c_str(), &end, 10);
    return *end == '\0' && errno == 0;
}

bool ScalarConverter::isFloat(const std::string& literal) {
    char* end;
    errno = 0;
    std::strtof(literal.c_str(), &end);
    return *end == 'f' && *(end + 1) == '\0' && errno == 0;
}

bool ScalarConverter::isDouble(const std::string& literal) {
    char* end;
    errno = 0;
    std::strtod(literal.c_str(), &end);
    return *end == '\0' && errno == 0;
}

void ScalarConverter::printChar(char c) {
    if (std::isprint(c)) {
        std::cout << "char: '" << c << "'" << std::endl;
    } else {
        std::cout << "char: Non displayable" << std::endl;
    }
}

void ScalarConverter::printInt(int i) {
    std::cout << "int: " << i << std::endl;
}

void ScalarConverter::printFloat(float f) {
    if (std::isnan(f)) {
        std::cout << "float: nanf" << std::endl;
    } else if (std::isinf(f)) {
        std::cout << "float: " << (f < 0 ? "-inff" : "+inff") << std::endl;
    } else {
        std::cout << "float: " << f << "f" << std::endl;
    }
}

void ScalarConverter::printDouble(double d) {
    if (std::isnan(d)) {
        std::cout << "double: nan" << std::endl;
    } else if (std::isinf(d)) {
        std::cout << "double: " << (d < 0 ? "-inf" : "+inf") << std::endl;
    } else {
        std::cout << "double: " << d << std::endl;
    }
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <literal>" << std::endl;
        return 1;
    }

    std::string literal(argv[1]);
    ScalarConverter::convert(literal);
    return 0;
}
